МДК.01.02 "Прикладное программирование"
ЛЗ 6. Решение задач по теме "Ссылки"
Составитель: Гусятинер Л.Б., 25.04.2020, МГОТУ ККМТ, П1-17, П2-17

[1] Упражнения раздела 2.5
1) Упражнение 2.24. Какие из следующих определений (если они есть) недопустимы? Почему? Как их исправить?
(a)	int ival = 1.01;  допустимо, но убереться сотая часть
(b) int &rvall = 1.01;  недопустимо, т.к ссылка должна ссылаться на переменную (int &rvall = ival) ,либо же ссылку можно сделать константной (const int &rvall = 1.01)
(с)	int &rval2 = ival;  допустимо
(d) const int &rval3 = 1; допустимо только для константных ссылок

2) Упражнение 2.25. Какие из следующих присвоений (если они есть) являются недопустимыми 
(с учетом предыдущих определений)? Если таковые есть, объясните, почему.
(а)	rva12 = 3.14159; недопустимо, т.к rva12 не была объявлена
(b) rva12 = rva13; недопустимо, т.к rva12 и rva13 не были объявлены выше
(с)	ival = rval3; допустимо
(d) rval3 = ival; недопустимо, т.к rval3 константная ссылка, а значит, что через нее мы не можем изменить значение

3) Упражнение 2.26. В чем разница между определениями (а) и присвоениями (Ь)? 
Какие из них (если есть) недопустимы?
(a)	int ival = 0;	      (b) ival = ri;
const int &ri =0;	    ri = ival;
Ответ:   допустимы оба варианта

4) Упражнение 2.27. Что отобразит на экране следующий код?
int i, &ri = i; i = 5; ri = 10;
std::cout << i << " " << ri << std::endl;
Ответ: 10 10

[1] Упражнения раздела 4.2.3
5) Упражнение 4.15. Укажите принципиальные различия между указателями и ссылками.
 - Ссылка не может быть неинициализированной
- У ссылки нет нулевого значения
- Ссылки нельзя переинициализировать
- Нельзя получить адрес ссылки или ссылку на ссылку
- Нельзя создавать массивы ссылок
- Для ссылок не арифметики

[1] Упражнения раздела 7.2.2
6) Упражнение 7.7. Объясните различие между параметрами в следующих двух объявлениях.
void f(Т);
void f(Т&);
Ответ: в первом варианте в функцию передается объект (локальная переменная),  в функцию передается ссылка 

7) Упражнение 7.8. Приведите пример случая, когда параметр должен быть ссылочным.
Приведите пример случая, когда параметр не должен быть ссылочным.
Ссылочный параметр:
void swap (int &a, int &b){
	int t = b;
	b = a;
	a = t;
}

Не ссылочный параметр:
int fakt(int num)
{
    int rezult = 1; 
    for (int i = 1; i <= num; i++) 
        rez *= i; 
    return rez; 
}


8) Упражнение 7.10. Следующая функция хоть и вполне допустима, но менее полезна,
чем могла бы быть. Выявите и устраните ограничения.
bool test(string& s) { return s.empty(); } Написать main для аргументации своего решения

Ссылку нужно сделать константной, чтоб осуществлять передачу по значению в функцию

#include <iostream>

using namespace std;
bool test(string& s) 
    { 
        return s.empty(); 
        
    } 
    
bool test_v2(const string& s)
{ 
    return s.empty(); 
    
} 
int main()
{
    string str;
    cin >> str;
    cout << test(str) << endl;
    cout << test_v2(str) << endl;
   // cout << test("acv") << endl; выведет ошибку, т.к. ссылку нужно сделать константной, чтоб осуществлять передачу по значению в функцию
    cout << test_v2("acv") << endl;
    
    

    return 0;
}

9) Упражнение 7.11. Когда ссылочные параметры должны быть константными? 
Какие проблемы могут возникнуть, если параметр является обычной ссылкой, 
а какие — если он является константной ссылкой?
Если при передачи больших парметров(string, vector, list, map, set) мы хотим избежать ненужного копирования при передаче параметров, но не хотим позволять изменять параметр внутри функции, его следует передавать по константной ссылке
Если параметр является обычной ссылкой, то в функцию можно передавать только переменные в качетсве аргумента
Если параметр является константной ссылкой, 	то мы не сможем его изменить
