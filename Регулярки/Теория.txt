Регулярные выражения
Составитель: Пищулин И.А., 16.05.2020

Создание регулярных выражений:



Python:
		
Для работы с ними требуется подключить библиотеку re.

	import re

Далее создаем шаблон 

	regex = re.compile(pattern)
, где pattern - текстовый шаблон в виде "asd" или "[abc]+"

и работаем с этим шаблоном

	regex.match(_, _)
	regex.search(_, _)

и так далее



C++

Для работы с ними требуется подключить библиотеку regex.

	#include <regex>

Далее создаем шаблон 

	regex re(pattern);
, где pattern - текстовый шаблон в виде "asd" или "[abc]+"

и работаем с этим шаблоном

	regex_search(str, m, re);
, str - строка, в которой ищу символы, m - объект типа smatch для результатов поиска, re - объект выражения 

и так далее



Написание шаблона регулярного выражения:

Самый простой шаблон регулярок используется для нахождения прямого соответствия в тексте. Например выражение /asd/ 
будет соответвовать именно такой последовательности символов в строке. Например, в строке "Hello, asd. How are you?" 
выражению будет соответствовать именно 'asd' с индексом 7.



Флаги.

В регулярках есть возможность указыват область поиска с помощью флагов.

'/asd/{flags}'

	i 	С этим флагом поиск не зависит от регистра.
	
	g	С этим флагом поиск ищет все совпадения, без него – только первое.
	
	m	Многострочный режим

	s	Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n.

	u	Включает полную поддержку юникода.

	y	Режим поиска на конкретной позиции в тексте.

Например, выражение '/asd/ig' будет регистронезависимым и искать во всем тексте
	

Использование специальных символов.

Когда требуеся создать более гибкую регулярку, используются спец.символы:

	* 	Соответствует предыдущему символу, повторенному 0 или более раз  
		
		/as*d/ -> (Будет найдено соответствие) 'asssssd' или 'ad' или 'asd'

	+ 	Соответствует предыдущему символу, повторенному 1 или более раз  
		
		/as+d/ -> 'asssssd' или 'asd' ('ad' - не совпадает)

	? 	Соответствует предыдущему символу, повторенному 0 или 1  
		
		/as?d/ -> 'asd' или 'ad'

	. 	Соответствует любому символу, кроме переноса строки 
		
		/a.d/ -> 'asd' или 'aad' или 'afd'
		/.s/ -> 'as' или 'bs', но не 'bas'

	? 	Соответствует предыдущему символу, повторенному 0 или 1  
		
		/as?d/ -> 'asd' или 'ad'

	$ 	Соответствует концу ввода
		
		/asd$/ -> 'asd' или 'adaasd', но не 'asdffg'
	
	^ 	Соответствует началу ввода
		
		/^asd/ -> 'asd' или 'asdada', но не 'ffgasd'

	\ 	Экранирует обрабатываемые символы
		
		/^asd/ -> 'asd' или 'asdada', но не 'ffgasd'
		/\^asd/ -> '^asd' или 'asfg^asd'
	
	| 	Логическое ИЛИ
		
		/a|s|d/ -> 'a' или 's' или 'd'

	Диапазаоны

	{n}	Соответствует предыдущему символу, повторенному n раз
	
		 /as{3}d/ -> 'asssd'

	{n, m}	Соответствует предыдущему символу, повторенному от n до m раз
	
		 /as{3, 5}d/ -> 'asssd' или 'assssd' или 'asssssd'

	{n,}	Соответствует предыдущему символу, повторенному не менее n раз
	
		 /as{3,}d/ -> 'asssd' или 'assssd' или 'asssssd', но не 'assd'

	{,m}	Соответствует предыдущему символу, повторенному не более n раз
	
		 /as{,5}d/ -> 'asssd' или 'assssd' или 'asssssd', но не 'asssssssd'

	Наборы символов

	[asd]	Соответствует любому символу в этом наборе. Можно использовать диапазоны [a-z]
		
		 /[asd]/ -> 'a' или 'уd' или 's'
		 /[a-z]/ -> 'a' или 'уd' или 's'

	[^asd]	Соответствует любому символу, кроме этого набора. Обратите внимание, что символ ^ в наборах соответствует не началу строки, а отрицанию.

		/[^asd]/ -> 'f' или 'fg' или 'hj' или 'ag'(будет найдено g)

	Скобочные последовательности

	(x)	Соответствует 'x' и запоминает это соответствие.

		/(x)/ -> 'x' или 'xadx'(вернется массив {'x', 'x'})

	(?:x)	Соответствует 'x' но не запоминает это соответствие.

		/(?:x)asd/ -> 'xasd'(вернется массив {'asd'}), но не 'aasd'

	x(?=y) 	Соответствует 'x' только если за 'x' следует 'y'.
		
		/x(?=z)/ -> 'xzfds'(вернется массив {'x'}), но не 'xpz'

	(?<=y)x Соответствует 'x' только если перед 'x' следует 'y'.
		
		/(?<=y)x/ -> 'sdyx'(вернется массив {'x'}), но не 'aspx'

	x(?!y)	Соответствует 'x' только если за 'x' не следует 'y'.
		
		/x(?!z)/ -> 'xpz'(вернется массив {'x'}), но не 'xzfds'

	Остальные символы

	\d	Соответствует цифровому символу.

		/[\d]+/ -> '1234'

	\D	Соответствует не цифровому символу.

		/[\D]+/ -> 'asdf', но не '1234'

	\w	Соответствует любому цифробуквенному символу включая нижнее подчеркивание.

		/[\w]+/ -> 'asd_as'

	\W	Соответствует любому не цифробуквенному символу.

		/[\W]+/ -> '%', но не '1234as'

	\s	Соответствует одиночному символу пустого пространства, включая пробел, табуляция, прогон страницы, перевод строки.

		/[\s]+/ -> '\t\n'

	\S	Соответствует одиночному символу непустого пространства.

		/[\W]+/ -> 'asdf', но не '\t\n'

Материалы: 
1) https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions
2) https://tproger.ru/articles/regexp-for-beginners/
3) https://learn.javascript.ru/regular-expressions